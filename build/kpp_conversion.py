# -----------------------------------------------------------------------------
#
# Copyright (c) 2017 Sam Cox, Roberto Sommariva
#
# This file is part of the AtChem2 software package.
#
# This file is covered by the MIT license which can be found in the file
# LICENSE.md at the top level of the AtChem2 distribution.
#
# -----------------------------------------------------------------------------

# -------------------------------------------------------------------- #
# This script converts a chemical mechanism file from KPP format
# (.kpp) to FACSIMILE format (.fac)
#
# ARGUMENT:
#   1. path to the mechanism .kpp file
# -------------------------------------------------------------------- #
from __future__ import print_function
import sys
import re


# =========================== FUNCTIONS =========================== #


def mechanism_section(input_lines, start_section, end_section):
    """
    Extracts lines between start_section and end_section from
    input_lines.

    """

    nlines = len(input_lines)

    start_i = 0
    for i in range(start_i, nlines):
        if start_section in input_lines[i]:
            start_i = i + 1
            break

    end_i = nlines
    if end_section:
        for i in range (start_i, nlines):
            if end_section in input_lines[i]:
                end_i = i + 1
                break

    section_lines = input_lines[start_i:end_i]
    return section_lines

# ------------------------------------------------------------ #

def convert_rates(section_lines):
    """
    Converts the format of section_lines and returns the converted
    lines.

    """

    simplelist = ['KRO2NO','KRO2HO2','KAPHO2','KAPNO','KRO2NO3','KNO3AL','KDEC',
                  'KROPRIM','KROSEC','KCH3O2','K298CH3O2','K14ISOM1']
    mechlist1 = []
    mechlist2 =[]
    for reac in section_lines:
        xx = re.split(r'=', reac)
        xx[1] = xx[1].replace('**', '@')
        if xx[0].strip() in simplelist:
            mechlist1.append(reac)
        else:
            mechlist2.append(reac)
    return mechlist1, mechlist2

# ------------------------------------------------------------ #

def convert_ro2(section_lines):
    """
    Converts the format of section_lines and returns the converted
    lines.

    """

    mechlist = []
    for line in section_lines:
        cleaned_line = re.sub(r'C\(ind_([A-Z0-9_]+)\s*\)', r'\1', line)
        cleaned_line = re.sub(r'\s*&', r'', cleaned_line.strip())
        mechlist.append(cleaned_line)
    return mechlist

# ------------------------------------------------------------ #

def convert_reactions(section_lines):
    """
    Converts the format of section_lines and returns the converted
    lines.

    """

    mechlist = []
    for reac in section_lines:
        if re.match(r'{\d+\.}', reac):
            xx = re.split(r'[}:;]', reac)
            kk = re.sub(r'J\((\d+)\)', r'J<\1>', xx[2])
            kk = kk.replace('**', '@')
            yy = '%' + kk + ':' + xx[1] + ';\n'
            mechlist.append(yy)
    return mechlist

# ------------------------------------------------------------ #

def kpp_to_facsimile(input_file):
    """
    Split a .kpp file into 4 parts: the summation of organic peroxy
    radicals (RO2), the generic and complex rate coefficients, the
    chemical reactions. Each part is separately converted to FACSIMILE
    format.

    WARNING: this function assumes that the input file is in a similar
    KPP format as generated by the MCM web extractor. It may fail for other

    Args:
        input_file (str): name of the .kpp file to convert

    Returns:
        generic_rates (list):
        complex_reactions (list):
        peroxy_radicals (list):
        reaction_definitions (list):

    """

    # Read in the .kpp mechanism file
    with open(input_file, 'r') as file_open:
        contents = file_open.readlines()

    # Peroxy radicals
    start_section = 'RO2 = & '
    end_section = ') \n'
    peroxy_lines = mechanism_section(contents, start_section, end_section)
    peroxy_radicals = convert_ro2(peroxy_lines)

    # Generic Rate Coefficients, Complex reactions
    start_section = ') \n'
    end_section = '#ENDINLINE'
    rates_lines = mechanism_section(contents, start_section, end_section)
    rates_lines = rates_lines[:-2]   # remove `CALL mcm_constants()` line
    generic_rates, complex_reactions = convert_rates(rates_lines)

    # Reaction definitions
    start_section = '#EQUATIONS'
    end_section = ''   # file ends after list of reactions
    reactions_lines = mechanism_section(contents, start_section, end_section)
    reaction_definitions = convert_reactions(reactions_lines)

    #
    return generic_rates, complex_reactions, peroxy_radicals, reaction_definitions

# ------------------------------------------------------------ #

def write_fac_file(input_file):
    """
    Convert a .kpp file to FACSIMILE format and save the output to a
    .fac file. The format conversion is done by the kpp_to_facsimile()
    function -- see its documentation for details.

    Args:
        input_file (str): name of the .kpp file to convert
    """

    print('Running write_fac_file() on: ' + str(input_file))

    contents1, contents2, contents3, contents4 = kpp_to_facsimile(input_file)
    output_file = input_file.split('.')[0] + '.fac'

    with open(output_file, 'w') as file_open:
        file_open.write('\n* Generic Rate Coefficients ;\n')
        file_open.writelines(contents1)
        file_open.write('\n* Complex reactions ;\n')
        file_open.writelines(contents2)
        file_open.write('\n* Peroxy radicals ;\n')
        file_open.write('RO2 = ')
        file_open.writelines(contents3)
        file_open.write(';\n')
        file_open.write('\n* Reaction definitions ;\n')
        file_open.writelines(contents4)


# =========================== MAIN =========================== #


def main():
    # Pass argument from command line - name of the .kpp file to convert
    if len(sys.argv) > 1:
        #kpp_to_facsimile(sys.argv[1])  <- CHANGE THIS
        write_fac_file(sys.argv[1])
    else:
        print('*****************************************************')
        print('* Please pass a filename (.kpp) as script argument. *')
        print('*****************************************************')

# Call the main function if executed as script
if __name__ == '__main__':
    main()
