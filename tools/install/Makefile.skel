# -----------------------------------------------------------------------------
#
# Copyright (c) 2009 - 2012 Chris Martin, Kasia Boronska, Jenny Young,
# Peter Jimack, Mike Pilling
#
# Copyright (c) 2017 Sam Cox, Roberto Sommariva
#
# This file is part of the AtChem2 software package.
#
# This file is covered by the MIT license which can be found in the file
# LICENSE.md at the top level of the AtChem2 distribution.
#
# -----------------------------------------------------------------------------

# ==================== Makefile for AtChem2 ==================== #

# Choose the Fortran compiler
# 1. "gnu" for gfortran (DEFAULT)
# 2. "intel" for ifort
FORTC = "gnu"

# Set the dependencies paths. Use full paths, not relative paths. For
# example: `$(HOME)/path/to/dependencies/directory/cvode/lib`
CVODELIBDIR = cvode/lib
OPENLIBMDIR = openlibm
FRUITDIR    = fruit_3.4.3

# Set the default location of the chemical mechanism shared library
# (`mechanism.so`). Use the second argument of the build script
# (`build/build_atchem2.sh`) to override $SHAREDLIBDIR
SHAREDLIBDIR = model/configuration

# =========================================================================== #
# DO NOT MODIFY BELOW THIS LINE
# =========================================================================== #

.SUFFIXES:
.SUFFIXES: .f90 .o
.PHONY: all sharedlib clean

# detect operating system
OS := $(shell uname -s)

# if on GitHub Actions
ifeq ($(GITHUB_ACTIONS),true)
  ifeq ($(RUNNER_OS),Linux)
    # if Linux, pass gfortran
    FORT_COMP    = gfortran-$(FORT_VERSION)
    FORT_LIB     = ""
  else
    # if macOS, pass homebrew gfortran
    FORT_COMP    = /usr/local/bin/gfortran-$(FORT_VERSION)
    FORT_LIB     = ""
  endif
# if not on GitHub Actions, set the Fortran compiler
else
  ifeq ($(FORTC),"gnu")
    FORT_COMP    = gfortran
    FORT_LIB     = ""
  endif
  ifeq ($(FORTC),"intel")
    FORT_COMP    = ifort
    FORT_LIB     = ""
  endif
endif

# set the main compilation flags for each compiler
CCOV = false
ifeq ($(FORTC),"gnu")
  FFLAGS = -ffree-form -fimplicit-none -Wall -Wpedantic -fcheck=all -fPIC
  ifeq ($(CCOV),true)    # add gcov flags for code coverage testing
    FFLAGS += -fprofile-arcs -ftest-coverage
  else    # add optimization flag for normal usage
    FFLAGS += -O2
  endif
  FSHAREDFLAGS = -ffree-line-length-none -ffree-form -fimplicit-none -Wall -Wpedantic \
                 -Wno-unused-dummy-argument -fcheck=all -fPIC -shared
endif
ifeq ($(FORTC),"intel")
  FFLAGS       = -free -implicitnone -warn all -check all -fpic -O2
  FSHAREDFLAGS = -free -implicitnone -warn all -check all -fpic -shared
endif

# set the rpath flag
ifeq ($(OS),Linux)
  RPATH_OPTION = -R
else
  RPATH_OPTION = -rpath
endif

# set the CVODE and openlibm compilation flags
LDFLAGS = -L$(CVODELIBDIR) -L$(OPENLIBMDIR) -Wl,$(RPATH_OPTION),/usr/lib/:$(CVODELIBDIR):$(OPENLIBMDIR) \
          -lopenlibm -lsundials_fcvode -lsundials_cvode -lsundials_fnvecserial -lsundials_nvecserial -ldl

# object files and source files directories
OBJ = obj
SRC = src

# executable
AOUT = atchem2

# fortran source files
CORE_SRCS = $(SRC)/dataStructures.f90 $(SRC)/argparse.f90 $(SRC)/interpolationFunctions.f90 \
                $(SRC)/configFunctions.f90 $(SRC)/inputFunctions.f90 $(SRC)/outputFunctions.f90 \
                $(SRC)/atmosphereFunctions.f90 $(SRC)/solarFunctions.f90 $(SRC)/constraintFunctions.f90 \
                $(SRC)/solverFunctions.f90 $(SRC)/parameterModules.f90
SRCS = $(CORE_SRCS) $(SRC)/atchem2.f90

# prerequisite is $SRCS, so this will be rebuilt every time any source
# file in $SRCS is changed
$(AOUT): $(SRCS)
	$(FORT_COMP) -o $(AOUT) -J$(OBJ) -I$(OBJ) $(SRCS) $(FFLAGS) $(LDFLAGS)

# secondary makefile for the Testsuite
include tests/makefile.tests

# ==================== Makefile rules  ==================== #

all: $(AOUT)

sharedlib:
	$(FORT_COMP) -c $(SRC)/dataStructures.f90 $(FSHAREDFLAGS) -o $(SRC)/dataStructures.o -J$(OBJ) -I$(OBJ)
	$(FORT_COMP) -c $(SHAREDLIBDIR)/customRateFuncs.f90 $(FSHAREDFLAGS) -o $(SHAREDLIBDIR)/customRateFuncs.o -J$(OBJ) -I$(OBJ)
	$(FORT_COMP) -c $(SHAREDLIBDIR)/mechanism.f90 $(FSHAREDFLAGS) -o $(SHAREDLIBDIR)/mechanism.o -J$(OBJ) -I$(OBJ)
	$(FORT_COMP) -shared -o $(SHAREDLIBDIR)/mechanism.so $(SRC)/dataStructures.o $(SHAREDLIBDIR)/customRateFuncs.o $(SHAREDLIBDIR)/mechanism.o

clean:
	rm -f $(AOUT)
	rm -f $(OBJ)/*.mod
	rm -rf build/__pycache__
	rm -f *.gcda *.gcno *.xml build/*.pyc tests/*.log
	rm -f doc/figures/*.png doc/latex/*.aux doc/latex/*.bbl doc/latex/*.blg doc/latex/*.log \
              doc/latex/*.out doc/latex/*.toc
	rm -f model/configuration/mechanism.{f90,o,prod,reac,ro2,so,species} \
              model/output/*.output model/output/reactionRates/*[0-9]
	rm -f tests/tests/*/*.out tests/tests/*/model/configuration/mechanism.{f90,o,prod,reac,ro2,so,species} \
              tests/tests/*/output/*.output tests/tests/*/output/reactionRates/*[0-9]
	rm -f $(MODELTESTDIR)/*/*.out $(MODELTESTDIR)/*/configuration/mechanism.{f90,o,prod,reac,ro2,so,species} \
              $(MODELTESTDIR)/*/output/*.output $(MODELTESTDIR)/*/output/reactionRates/*[0-9]
	rm -f $(UNITTESTDIR)/fruit_*_gen.f90 $(UNITTESTDIR)/fruit_generator.rb $(fruit_driver)

# ==================== Dependencies ==================== #

atchem2.o : atchem2.f90 inputFunctions.o configFunctions.o dataStructures.o
argparse.o : argparse.f90 dataStructures.o
constraintFunctions.o : constraintFunctions.f90 dataStructures.o
atmosphereFunctions.o : atmosphereFunctions.f90
dataStructures.o : dataStructures.f90
inputFunctions.o : inputFunctions.f90 configFunctions.o dataStructures.o
interpolationFunctions.o : interpolationFunctions.f90 dataStructures.o
configFunctions.o : configFunctions.f90
outputFunctions.o : outputFunctions.f90 dataStructures.o
parameterModules.o : parameterModules.f90 dataStructures.o
solverFunctions.o : solverFunctions.f90 dataStructures.o
